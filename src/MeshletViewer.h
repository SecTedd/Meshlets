// Copyright 2011-2021 the Polygon Mesh Processing Library developers.
// Distributed under a MIT-style license, see LICENSE.txt for details.

#pragma once

#include <memory>
#include <pmp/visualization/mesh_viewer.h>
#include "meshlets/Meshlets.h"
#include "meshlets/sites/PoissonDiskRandom.h"

// =======================================================================
// =========== Code generated by Github Copilot on 30.11.2023 ============
/**
 * @brief Buffer Class to update text in ImGui on runtime
*/
class ImGuiStreamBuffer : public std::streambuf
{
public:
    ImGuiStreamBuffer(std::string& str) : str_(str) {}

protected:
    virtual int_type overflow(int_type c)
    {
        if (c != EOF)
        {
            if (c == '\n')
            {
                str_.clear();
                str_ += buffer_;
                buffer_.clear();
            }
            else
            {
                buffer_ += static_cast<char>(c);
            }
        }
        return c;
    }

private:
    std::string& str_;
    std::string buffer_;
};
// =======================================================================

class MeshletViewer : public pmp::MeshViewer
{
public:
    // constructor
    MeshletViewer(const char* title, int width, int height)
        : MeshViewer(title, width, height), imguiBuffer(info_text)
    {
        set_draw_mode("Smooth Shading");
        // redirect std::cout and std::cerr to the Custom Stream Buffer for ImGui
        std::cout.rdbuf(&imguiBuffer);
        std::cerr.rdbuf(&imguiBuffer);
    }

    // calculates the camera position from the inverse modelview matrix
    pmp::vec3 get_camera_position();

protected:
    // this function handles keyboard events
    void keyboard(int key, int code, int action, int mod) override;
    void process_imgui() override;
    void scroll(double xoffset, double yoffset) override;
    void motion(double xpos, double ypos) override;

private:
    // the clustering and sites data structure
    meshlets::ClusterAndSites cluster_and_sites;
    // the info text that will be displayed in ImGui
    std::string info_text = "Welcome to the Meshlet Viewer!";
    // the stream buffer to update the info text in ImGui
    ImGuiStreamBuffer imguiBuffer;
    // boolean flag to indicate if LOD pipeline is enabled
    bool lod_enabled = false;
    meshlets::TreeNode lod_tree;
    std::vector<meshlets::TreeNode> currently_visible_nodes;

    // handles everything that happens when lod_enabled is set to true
    void handle_lod();
};